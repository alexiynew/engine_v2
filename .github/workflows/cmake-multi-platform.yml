# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix
      matrix:
        os: [ubuntu-latest, windows-latest]
        preset: [visual-studio, ninja, ninja-multi]
        compiler: [gcc, clang, cl]
        build_type: [release]
        #include:
          # nothing, all configs should be in presets
        exclude:
          - os: windows-latest
            preset: visual-studio
            compiler: clang
          - os: windows-latest
            preset: visual-studio
            compiler: gcc
          - os: windows-latest
            preset: ninja
            compiler: cl
          - os: windows-latest
            preset: ninja-multi
            compiler: cl
          - os: ubuntu-latest
            compiler: cl
          - os: ubuntu-latest
            preset: visual-studio

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        if [ "${{ matrix.preset }}" == "visual-studio" ]; then
          CONFIG_PRESET_NAME="${{ matrix.preset }}"
          BUILD_PRESET_NAME="${{ matrix.preset }}-${{ matrix.build_type }}"
        elif [ "${{ matrix.preset }}" == "ninja-multi" ]; then
          CONFIG_PRESET_NAME="${{ matrix.preset }}-${{ matrix.compiler }}"
          BUILD_PRESET_NAME="${{ matrix.preset }}-${{ matrix.compiler }}-${{ matrix.build_type }}"
        elif [ "${{ matrix.preset }}" == "ninja" ]; then
          CONFIG_PRESET_NAME="${{ matrix.preset }}-${{ matrix.compiler }}-${{ matrix.build_type }}"
          BUILD_PRESET_NAME="${{ matrix.preset }}-${{ matrix.compiler }}-${{ matrix.build_type }}"
        else
          echo "Invalid preset configuration"
          exit 1
        fi        

        echo "build-output-dir=${{ github.workspace }}/build/$CONFIG_PRESET_NAME" >> "$GITHUB_OUTPUT"
        echo "config-preset=$CONFIG_PRESET_NAME" >> "$GITHUB_OUTPUT"
        echo "build-preset=$BUILD_PRESET_NAME" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake --preset=${{ steps.strings.outputs.config-preset }}
        -B ${{ steps.strings.outputs.build-output-dir }}
        -DENABLE_CPPCHECK=OFF
        -DUSE_STUB_BACKEND=ON
        -DUSE_STUB_RENDERER=ON
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build --preset=${{ steps.strings.outputs.build-preset }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
    
    - name: Print log file
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      if: failure()
      run: |
        echo "======= Start log ======="
        cat ${{ steps.strings.outputs.build-output-dir }}/Testing/Temporary/LastTest.log
        echo "======= Stop log  ======="